// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MCIDigitalCheckout
import CoreLocation
import Kingfisher
import MCIAuth
import MCICheckoutCore
@_exported import MCIDigitalCheckout
import MCIFoundation
import MCIKit
import MCILogger
import MCIProfileCore
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers final public class CheckoutVC : MCIViewController, Checkoutable, Identifiable, Dismissable {
  final public var strategy: CheckoutStrategy {
    get
    set
  }
  final public var accounts: [MCIAccount] {
    get
    set
  }
  weak final public var delegate: CheckoutDelegate?
  final public var isOffline: Swift.Bool
  final public var shouldDisplayViewMessage: Swift.Bool
  final public var usePLAvailableLimit: Swift.Bool
  final public var moduleCheckout: ModuleCheckout
  final public class func allocate() -> CheckoutVC
  final public func checkout(strategy: CheckoutStrategy, accounts: [MCIAccount]?, delegate: CheckoutDelegate?) -> CheckoutableVC
  @objc override final public func viewDidLoad()
  @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  final public func prepopulate(activeAccounts: [MCIAccount]?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension CheckoutVC : UIKit.UIScrollViewDelegate {
  @objc final public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension CheckoutVC : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc final public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension CheckoutVC : UIKit.UIViewControllerTransitioningDelegate {
  @objc final public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc final public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension UIStoryboard {
  public class var checkout: UIKit.UIStoryboard {
    get
  }
}
public protocol DigitalOperationFlowDelegate : AnyObject {
  func digitalOperation(_ digitalOperation: DigitalOperationFlowVC, didCompleteWith object: Any?)
}
@_inheritsConvenienceInitializers public class DigitalOperationFlowVC : MCIFlowViewController, Identifiable {
  public var strategy: AutoCheckoutStrategy!
  public var dismissToWallet: Swift.Bool?
  weak public var delegate: AutoCheckoutDelegate?
  public class func allocate() -> DigitalOperationFlowVC
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension DigitalOperationFlowVC : AutoCheckoutable {
  public func checkout(strategy: AutoCheckoutStrategy, delegate: AutoCheckoutDelegate?, dismissToWallet: Swift.Bool?) -> AutoCheckoutVC
}
extension DigitalOperationFlowVC : PasswordFlowDelegate {
  public func passwordFlowDidAuthenticate(_ passwordFlowVC: PasswordFlowVC)
  public func dismissView(_ passwordFlowVC: PasswordFlowVC)
}
extension CheckoutVC : UIKit.UICollectionViewDelegateFlowLayout {}
