// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MCIFoundation
import AVFoundation
import AdSupport
import Alamofire
import CommonCrypto
import Contacts
import CoreImage
import CoreLocation
import Foundation
import KeychainAccess
import LocalAuthentication
@_exported import MCIFoundation
import MCILogger
import MapKit
import Swift
import UIKit
final public class MCIAccountPixClaim : Swift.Codable {
  final public var claims: MCIPixClaim? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixClaim : Swift.Codable {
  final public var confirmed: [MCIPixClaimData]? {
    get
  }
  final public var pending: [MCIPixClaimData]? {
    get
  }
  final public var denied: [MCIPixClaimData]? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixClaimData : Swift.Codable {
  final public var title: Swift.String? {
    get
  }
  final public var message: Swift.String? {
    get
  }
  final public var subtitle: Swift.String? {
    get
  }
  final public var actions: [MCIPixClaimActions]? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixClaimActions : Swift.Codable {
  final public var text: Swift.String? {
    get
  }
  final public var action: Swift.String? {
    get
  }
  final public var params: MCIPixClaimActionParam? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixClaimActionParam : Swift.Codable {
  final public var playerType: Swift.String? {
    get
  }
  final public var deleteType: Swift.String? {
    get
  }
  final public var claimUuid: Swift.String? {
    get
  }
  final public var id: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension NSError {
  public class func error(_ title: Swift.String, _ description: Swift.String) -> Foundation.NSError
  public class func error(code: ObjectiveC.NSInteger, title: Swift.String, description: Swift.String) -> Foundation.NSError
  public class func error(code: ObjectiveC.NSInteger, title: Swift.String, description: Swift.String, userInfo: [Swift.AnyHashable : Any]?) -> Foundation.NSError
  public class func genericError() -> Foundation.NSError
  public class func unexpectedResponseError() -> Foundation.NSError
}
public enum ModuleCheckout {
  case pay
  case withdraw
  case marketplace
  case wallet
  case general
  public static func == (a: ModuleCheckout, b: ModuleCheckout) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum MCIFoundationSource : Swift.String {
  case unknown
  case customer
  case merchant
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct MCIFoundationAccounts {
  public struct Uber {
    public let clientId: Swift.String
  }
  public let uber: MCIFoundationAccounts.Uber
}
public typealias MCIAuthClient = (id: Swift.String, secret: Swift.String)
@_hasMissingDesignatedInitializers final public class MCIFoundation {
  public static let shared: MCIFoundation
  final public var currentSession: MCISession?
  final public var support: MCISupport?
  final public var settings: MCISettings?
  final public let accounts: MCIFoundationAccounts
  final public var timeServerDiff: Swift.Double
  final public var needBlockTransactions: Swift.Bool {
    get
  }
  final public var additionalHeaderDelegate: MCIAdditionalHeaderDelegate?
  final public var inject: MCIInjectionController {
    get
    set
  }
  final public class func instantiate(source: MCIFoundationSource, environment: MCIFoundationEnvironment, auth: MCIAuthClient)
  final public func revokeCurrentSession(sendNotification: Swift.Bool)
  final public func sessionAvailable() -> Swift.Bool
  final public func isSandbox() -> Swift.Bool
  final public func registerRemoteNotificationToken(_ deviceToken: Foundation.Data)
  final public func currentLocation() -> MCILocation?
  @objc deinit
}
extension MCIFoundation {
  final public func requestNewHome(completion: @escaping ((Swift.Result<MCIHome, Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerAccounts(completion: @escaping ((Swift.Result<[MCIAccount], Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerAccount(customerAccount: MCIAccount, completion: @escaping ((Swift.Result<MCIAccount, Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerAccountCreation(issuer: MCIIssuer, product: MCIIssuerProduct, failure: @escaping (Foundation.NSError) -> Swift.Void = { _ in }, success: @escaping (MCICustomerAccountQuiz) -> Swift.Void = { _ in })
  final public func validateNewCustomerAccount(quiz: MCICustomerAccountQuiz, answers: [MCICustomerAccountSelectedAnswer], completion: @escaping ((Swift.Result<MCICustomerAccountQuizSuccess, Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerAccountActivation(_ customerAccount: MCIAccount, failure: @escaping (Foundation.NSError) -> Swift.Void = { _ in }, success: @escaping (MCIAccount) -> Swift.Void = { _ in })
  final public func requestCustomerAccountDeactivation(_ customerAccount: MCIAccount, failure: @escaping (Foundation.NSError) -> Swift.Void = { _ in }, success: @escaping (MCIAccount) -> Swift.Void = { _ in })
  final public func requestCustomerTransactions(_ account: MCIAccount, completion: @escaping ((Swift.Result<[MCICustomerTransaction], Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerTransactionDetails(transactionId: Swift.String, completion: @escaping ((Swift.Result<MCITransactionDetails, Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerExternalAvailableLimits(_ account: MCIAccount, completion: @escaping ((Swift.Result<MCIExternalAccountLimit, Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerEligibleProducts(_ issuerId: Swift.String, completion: @escaping ((Swift.Result<[MCIIssuerProduct], Foundation.NSError>) -> Swift.Void))
}
extension MCIFoundation {
  final public func requestPrefetchImages(failure: @escaping (Foundation.NSError) -> Swift.Void = { _ in }, success: @escaping ([Swift.String]) -> Swift.Void = { _ in })
}
extension MCIFoundation {
  final public func store(key: Swift.String, value: Swift.String) -> Swift.Result<Swift.Void, Swift.Error>
  final public func retrive(key: Swift.String) -> Swift.Result<Swift.String, Swift.Error>
  final public func cachedHome(completion: @escaping ((Swift.Result<MCIHome, Swift.Error>) -> Swift.Void))
  final public func cachedMerchants() -> Swift.Result<[MCIMerchant], Swift.Error>
  final public func cachedMerchant(id: Swift.String) -> Swift.Result<MCIMerchant, Swift.Error>
  final public func cachedMerchant(merchantId: Swift.String, completion: @escaping ((Swift.Result<MCIMerchant, Swift.Error>) -> Swift.Void))
  final public func cachedAccounts(completion: @escaping ((Swift.Result<[MCIAccount], Swift.Error>) -> Swift.Void))
  final public func cachedAccountTransactions(accountId: Swift.String, completion: @escaping ((Swift.Result<[MCICustomerTransaction], Swift.Error>) -> Swift.Void))
  final public func cachedIssuerByIssuerId(issuerId: Swift.String, completion: @escaping ((Swift.Result<MCIIssuer?, Swift.Error>) -> Swift.Void))
}
final public class MCIAliasBank : Swift.Codable {
  final public var accountType: Swift.String? {
    get
  }
  final public var accountNumber: Swift.String? {
    get
  }
  final public var accountDigit: Swift.String? {
    get
  }
  final public var bankNumber: Swift.String? {
    get
  }
  final public var branchNumber: Swift.String? {
    get
  }
  final public var branchDigit: Swift.String? {
    get
  }
  final public var status: Swift.String? {
    get
  }
  final public var createdAt: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCIFormatter {
  final public class func obfuscate(email: Swift.String?) -> Swift.String
  final public class func format(cpf: Swift.String?) -> Swift.String
  final public class func normalize(cpf: Swift.String?) -> Swift.String
  final public class func format(cnpj: Swift.String?) -> Swift.String
  final public class func normalize(string: Swift.String?) -> Swift.String
  final public class func format(vat: Swift.String?) -> Swift.String
  final public class func obfuscate(vat: Swift.String?) -> Swift.String
  final public class func format(boleto: Swift.String?) -> Swift.String
  final public class func normalize(boleto: Swift.String?) -> Swift.String
  final public class func format(cellphone: Swift.String?) -> Swift.String
  final public class func format(supportCellphone: Swift.String?) -> Swift.String
  final public class func normalize(cellphone: Swift.String?) -> Swift.String
  final public class func format(date: Swift.String?) -> Swift.String
  final public class func format(zipCode: Swift.String?) -> Swift.String
  final public class func format(numberId: Swift.String?) -> Swift.String
  final public class func format(cardNumber: Swift.String?) -> Swift.String
  final public class func format(percentage: Swift.String?) -> Swift.String
  final public class func alphaNumeric(string: Swift.String?) -> Swift.String
  final public class func numeric(string: Swift.String?) -> Swift.String
  public static let usdFormatter: Foundation.NumberFormatter
  public static let currencyFormatter: Foundation.NumberFormatter
  public static let unroundedCurrencyFormatter: Foundation.NumberFormatter
  final public class func normalize(currency: Swift.String?) -> Swift.String
  final public class func format(bankAccountWithDigit: Swift.String?) -> Swift.String?
  final public class func normalize(bankAccountWithDigit: Swift.String?) -> (Swift.String?, Swift.String?)
  @objc deinit
}
public enum MCIFaqGroupStatus : Swift.String, Swift.Codable {
  case unknown
  case active
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCIFaqGroup : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var status: MCIFaqGroupStatus {
    get
  }
  final public var createdAt: Foundation.Date? {
    get
  }
  final public var questions: [MCIFaqQuestion]?
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
extension Array where Element : MCIFaqGroup {
  public func activesOnly() -> [MCIFaqGroup]
}
final public class MCICashInAliasBank : Swift.Codable {
  final public var userName: Swift.String? {
    get
  }
  final public var bank: Swift.String? {
    get
  }
  final public var accountNumber: Swift.String? {
    get
  }
  final public var accountDigit: Swift.String? {
    get
  }
  final public var branchNumber: Swift.String? {
    get
  }
  final public var branchDigit: Swift.String? {
    get
  }
  final public var accountType: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapCoordinate : Swift.Codable {
  final public var latitude: Swift.Double {
    get
  }
  final public var longitude: Swift.Double {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCICellphoneRechargeTransaction : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var amount: Swift.Double? {
    get
  }
  final public var createdAt: Foundation.Date? {
    get
  }
  final public var phoneNumber: Swift.String? {
    get
  }
  final public var receipt: Swift.String? {
    get
  }
  final public var merchantId: Swift.String? {
    get
  }
  final public var merchant: MCIMerchant? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
extension UIColor {
  convenience public init(hexString: Swift.String)
  public func hexString() -> Swift.String
}
public enum MCIFoundationEnvironment {
  case development(raw: [Swift.UInt8])
  case sandbox(data: [Swift.UInt8], raw: [Swift.UInt8])
  case production(data: [Swift.UInt8], raw: [Swift.UInt8])
}
@_hasMissingDesignatedInitializers final public class MapReverseGeocode : Swift.Codable {
  final public var address: Swift.String? {
    get
  }
  final public var formattedAddress: Swift.String? {
    get
  }
  final public var coordinate: MapCoordinate? {
    get
  }
  final public var addressComponents: MapAddressComponents? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MapAddressComponents : Swift.Codable {
  final public var streetName: Swift.String? {
    get
  }
  final public var streetNumber: Swift.String? {
    get
  }
  final public var neighborhood: Swift.String? {
    get
  }
  final public var city: Swift.String? {
    get
  }
  final public var state: Swift.String? {
    get
  }
  final public var countryLong: Swift.String? {
    get
  }
  final public var countryShort: Swift.String? {
    get
  }
  final public var postalCode: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension MapReverseGeocode {
  convenience public init(placemark: CoreLocation.CLPlacemark)
}
public enum MCITransactionServiceType {
  case api99(transaction: Api99Transaction?)
  case cellphoneRecharge(transaction: MCICellphoneRechargeTransaction?)
  case tvRecharge(transaction: MCITvRechargeTransaction?)
  case uber(transaction: MCIVoucherTransaction?)
  case voucher(transaction: MCIVoucherTransaction?)
  case offline(transaction: MCIVoucherTransaction?)
  case online(transaction: MCIVoucherTransaction?)
  case webview(transaction: MCIVoucherTransaction?)
  case unknown
}
extension MCITransactionServiceType : Swift.Codable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class MCITransactionDetails : Swift.Codable {
  final public var serviceType: MCITransactionServiceType {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
final public class MCIVoucherTransaction : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var amount: Swift.Double? {
    get
  }
  final public var receipt: Swift.String? {
    get
  }
  final public var serial: Swift.String? {
    get
  }
  final public var pin: Swift.String? {
    get
  }
  final public var createdAt: Foundation.Date? {
    get
  }
  final public var merchantId: Swift.String? {
    get
  }
  final public var merchant: MCIMerchant? {
    get
  }
  final public var actionURL: Swift.String? {
    get
  }
  final public var qrCode: Swift.String? {
    get
  }
  public init(id: Swift.String?, amount: Swift.Double?, receipt: Swift.String?, serial: Swift.String?, pin: Swift.String?, createdAt: Foundation.Date?, actionURL: Swift.String? = nil, qrCode: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MCIAccountWalletActionService : Swift.String, Swift.Codable {
  case bankSlip
  case ted
  case p2p
  case pl
  case invoiceReceipt
  case smsPackage
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum MCIAccountWalletActionType : Swift.String, Swift.Codable {
  case cashOut
  case cashIn
  case statement
  case bankSlip
  case virtualCard
  case invoice
  case physycalCardActivate
  case physicalCardRequest
  case physycalCardBlock
  case physycalCardUnblock
  case servicePortalUrl
  case plServices
  case pix
  public static let supported: [MCIAccountWalletActionType]
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCIAccountWalletAction : Swift.Codable {
  final public var name: Swift.String? {
    get
  }
  final public var type: MCIAccountWalletActionType? {
    get
  }
  final public var enabled: Swift.Bool? {
    get
  }
  final public var iconUrl: Swift.String? {
    get
  }
  final public var services: [MCIAccountWalletActionService]? {
    get
  }
  final public var actionUrl: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Api99DataDriver : Swift.Codable {
  final public var name: Swift.String? {
    get
  }
  final public var phone: Swift.String? {
    get
  }
  final public var photo: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class Api99Vehicle : Swift.Codable {
  final public var model: Swift.String? {
    get
  }
  final public var plate: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class Api99Data : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var status: Api99DataStatus? {
    get
  }
  final public var category: Api99DataCategory? {
    get
  }
  final public var origin: Api99Address? {
    get
  }
  final public var destination: Api99Address? {
    get
  }
  final public var driver: Api99DataDriver? {
    get
  }
  final public var vehicle: Api99Vehicle? {
    get
  }
  final public var location: Api99Position? {
    get
  }
  final public var route: Api99Route? {
    get
  }
  final public var createAt: Foundation.Date? {
    get
  }
  final public var userTitleAlert: Swift.String? {
    get
  }
  final public var userTextAlert: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum Api99DataStatus : Swift.String {
  case finding
  case noDriversAvailable
  case canceledByPassenger
  case canceledByDriver
  case onTheWay
  case arrived
  case inProgress
  case finished
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Api99DataStatus : Swift.CustomStringConvertible, Swift.Codable {
  public var description: Swift.String {
    get
  }
}
public enum Api99DataCategory : Swift.String {
  case pop99
  case top99
  case turboTaxi
  case regularTaxi
  public var type: Api99CategoryType {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Api99DataCategory : Swift.Codable {
}
final public class Api99Verify : Swift.Codable {
  final public var ride: Api99RideStatus? {
    get
  }
  final public var lastRides: [Api99Address]? {
    get
  }
  final public var addresses: [Api99UserAddress]? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCICacheController {
  public static let shared: MCICacheController
  final public func store<T>(_ encodable: T, _ key: Swift.String = "") throws where T : Swift.Encodable
  final public func retrieve<T>(type: T.Type, key: Swift.String = "") throws -> T? where T : Swift.Decodable
  @objc deinit
}
extension MCICacheController {
  final public func store(home: MCIHome) throws
}
extension MCICacheController {
  final public func storeAccounts(accounts: [MCIAccount]) throws
  final public func retrieveTransactionAccounts(accountId: Swift.String) throws -> [MCICustomerTransaction]
  final public func retrieveIssuerByIssuerId(issuerId: Swift.String) throws -> MCIIssuer
  final public func storeWallet(wallet: [MCIAccount]) throws -> Swift.Bool
  final public func retrieveWallet() throws -> [MCIAccount]?
}
@_hasMissingDesignatedInitializers final public class MCIMerchantAccount : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension MCIMerchantAccount : Swift.Equatable {
  public static func == (lhs: MCIMerchantAccount, rhs: MCIMerchantAccount) -> Swift.Bool
}
final public class MCIPayAccountLimit : Swift.Codable {
  final public var showBoxDetail: Swift.Bool? {
    get
  }
  final public var availableLimit: Swift.String? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case showBoxDetail
    case availableLimit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIWalletLimits : Swift.Codable {
  final public var showBoxDetail: Swift.Bool? {
    get
  }
  final public var availableLimit: Swift.String? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case showBoxDetail
    case availableLimit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Api99Ride : Swift.Codable {
  final public var rideId: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchantMcc : Swift.Codable {
  final public var id: Swift.UInt {
    get
  }
  final public var name: Swift.String {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension MCIMerchantMcc : Swift.Equatable {
  public static func == (lhs: MCIMerchantMcc, rhs: MCIMerchantMcc) -> Swift.Bool
}
public enum MCIFaqQuestionStatus : Swift.String, Swift.Codable {
  case unknown
  case active
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCIFaqQuestion : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var question: Swift.String? {
    get
  }
  final public var answer: Swift.String? {
    get
  }
  final public var status: MCIFaqQuestionStatus {
    get
  }
  final public var createdAt: Foundation.Date? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
extension Array where Element : MCIFaqQuestion {
  public func activesOnly() -> [MCIFaqQuestion]
}
final public class MCIExternalAccountLimit : Swift.Codable {
  final public var totalLimit: Swift.String? {
    get
  }
  final public var openCosts: Swift.String? {
    get
  }
  final public var availableLimit: Swift.String? {
    get
  }
  final public var merciLimit: Swift.String? {
    get
  }
  final public var installmentLimit: Swift.String? {
    get
  }
  final public var availableInstallmentLimit: Swift.String? {
    get
  }
  final public var withdrawLimit: Swift.String? {
    get
  }
  final public var availableWithdrawLimit: Swift.String? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case totalLimit
    case openCosts
    case availableLimit
    case merciLimit
    case installmentLimit
    case availableInstallmentLimit
    case withdrawLimit
    case availableWithdrawLimit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func percentage(of limit: Swift.String?, from totalLimit: Swift.String?) -> Swift.Double
  public static func percentage(of limit: Swift.Double?, from totalLimit: Swift.Double?) -> Swift.Double
  public static func formattedLimit(limit: Swift.String?, absolute: Swift.Bool = false) -> Swift.String
  @objc deinit
}
public enum MCICustomerAuthenticationType : Swift.String {
  case denied
  case pendingSms
  case smsVerified
  case newAccount
  case newPhone
  case samePhone
  case accountCreated
  case authenticated
  case reviewed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICustomerAuthenticationType : Swift.Codable {
}
final public class MCICustomerAuthentication : Swift.Codable {
  final public var id: Swift.String
  final public var status: MCICustomerAuthenticationType
  final public var phoneNumber: Swift.String?
  final public var cpf: Swift.String?
  final public var firstName: Swift.String?
  final public var lastName: Swift.String?
  final public var socialName: Swift.String?
  final public var email: Swift.String?
  final public var password: Swift.String?
  final public var name: Swift.String? {
    get
  }
  public init()
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MobileServiceController : Alamofire.SessionManager {
  public static let shared: MobileServiceController
  final public func serviceUrl(_ url: Swift.String) -> Swift.String
  final public func defaultHeader() -> Alamofire.HTTPHeaders?
  final public func get(_ url: Swift.String, parameters: Alamofire.Parameters?, encoding: Alamofire.ParameterEncoding, headers: Alamofire.HTTPHeaders?, success: @escaping (Alamofire.DataResponse<Any>) -> (), failure: @escaping (Foundation.NSError) -> ())
  final public func post(_ url: Swift.String, parameters: Alamofire.Parameters?, encoding: Alamofire.ParameterEncoding, headers: Alamofire.HTTPHeaders?, ignoreUnauthorizedSession: Swift.Bool = false, success: @escaping (Alamofire.DataResponse<Any>) -> (), failure: @escaping (Foundation.NSError) -> ())
  final public func put(_ url: Swift.String, parameters: Alamofire.Parameters?, encoding: Alamofire.ParameterEncoding, headers: Alamofire.HTTPHeaders?, success: @escaping (Alamofire.DataResponse<Any>) -> (), failure: @escaping (Foundation.NSError) -> ())
  final public func delete(_ url: Swift.String, parameters: Alamofire.Parameters?, encoding: Alamofire.ParameterEncoding, headers: Alamofire.HTTPHeaders?, success: @escaping (Alamofire.DataResponse<Any>) -> (), failure: @escaping (Foundation.NSError) -> ())
  final public func patch(_ url: Swift.String, parameters: Alamofire.Parameters?, encoding: Alamofire.ParameterEncoding, headers: Alamofire.HTTPHeaders?, success: @escaping (Alamofire.DataResponse<Any>) -> (), failure: @escaping (Foundation.NSError) -> ())
  override public init(configuration: Foundation.URLSessionConfiguration = super, delegate: Alamofire.SessionDelegate = super, serverTrustPolicyManager: Alamofire.ServerTrustPolicyManager? = super)
  override public init?(session: Foundation.URLSession, delegate: Alamofire.SessionDelegate, serverTrustPolicyManager: Alamofire.ServerTrustPolicyManager? = super)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCISession : Swift.Codable {
  final public var customer: MCICustomer? {
    get
  }
  final public var token: Swift.String? {
    get
  }
  final public class func session(_ customer: MCICustomer?) -> MCISession?
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MCIAccountType : Swift.String {
  case digital
  case privateLabel
  case unknow
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCIAccountType : Swift.Codable {
}
extension MCIAccountType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum MCICustomerAccountStatus : Swift.String, Swift.Codable {
  case active
  case canceled
  case blocked
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCIAccount : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var type: MCIAccountType {
    get
  }
  final public var issuerId: Swift.String? {
    get
  }
  final public var issuer: MCIIssuer? {
    get
  }
  final public var productId: Swift.String?
  final public var product: MCIIssuerProduct? {
    get
  }
  final public var token: MCICustomerAccountToken? {
    get
  }
  final public var status: MCICustomerAccountStatus
  final public var lastUsed: Foundation.Date? {
    get
  }
  final public var ui: MCIAccountUI? {
    get
  }
  final public var walletActions: [MCIAccountWalletAction]? {
    get
  }
  final public var lastFourPan: Swift.String? {
    get
  }
  final public var aliasBank: MCIAliasBank? {
    get
  }
  final public var externalCardId: Swift.String? {
    get
  }
  final public var externalVirtualCardId: Swift.String? {
    get
  }
  final public var isSync: Swift.Bool {
    get
  }
  final public var pix: MCIAccountPixClaim? {
    get
  }
  final public var pending: Swift.Bool? {
    get
  }
  final public var hasBankInfo: Swift.Bool {
    get
  }
  final public var hasExternalCard: Swift.Bool {
    get
  }
  final public var availableLimit: Swift.Double {
    get
  }
  final public var payAvailableLimit: Swift.Double {
    get
  }
  final public var marketplaceAvailableLimit: Swift.Double {
    get
  }
  final public var withdrawplaceAvailableLimit: Swift.Double {
    get
  }
  final public var merciAvailableLimit: Swift.Double {
    get
  }
  final public var totalLimit: Swift.Double {
    get
  }
  final public var usedLimit: Swift.Double {
    get
  }
  final public var totalInstallmentLimit: Swift.Double {
    get
  }
  final public var availableInstallmentLimit: Swift.Double {
    get
  }
  final public var usedInstallmentLimit: Swift.Double {
    get
  }
  final public var totalWithdrawLimit: Swift.Double {
    get
  }
  final public var availableWithdrawLimit: Swift.Double {
    get
  }
  final public var usedWithdrawLimit: Swift.Double {
    get
  }
  final public var payBoxAvailability: Swift.Bool {
    get
  }
  final public var marketplaceBoxAvailability: Swift.Bool {
    get
  }
  final public var withdrawBoxAvailability: Swift.Bool {
    get
  }
  final public var walletBoxAvailability: Swift.Bool {
    get
  }
  final public var payPrivateLabelAvailableLimit: Swift.Double {
    get
  }
  final public var marketplacePrivateLabelAvailableLimit: Swift.Double {
    get
  }
  final public var withdrawPrivateLabelAvailableLimit: Swift.Double {
    get
  }
  final public var walletAvailableLimit: Swift.Double {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  final public func formattedAvailableLimit() -> Swift.String
  final public func formattedMerciAvailableLimit() -> Swift.String
  final public func formattedTotalLimit() -> Swift.String
  final public func formattedUsedLimit() -> Swift.String
  final public func formattedTotalInstallmentLimit() -> Swift.String
  final public func formattedUsedInstallmentLimit() -> Swift.String
  final public func formattedTotalWithdrawLimit() -> Swift.String
  final public func formattedUsedWithdrawLimit() -> Swift.String
  final public func formattedCheckoutPayLimit() -> Swift.String
  final public func formattedCheckoutMarketplaceLimit() -> Swift.String
  final public func formattedCheckoutWithdrawLimit() -> Swift.String
  final public func formattedCheckoutWalletLimit() -> Swift.String
  final public func shouldDisplayBox(module: ModuleCheckout = .general) -> Swift.Bool
  @objc deinit
}
extension MCIAccount : Swift.Equatable {
  public static func == (lhs: MCIAccount, rhs: MCIAccount) -> Swift.Bool
}
extension Array where Element : MCIAccount {
  public func activesOnly() -> [MCIAccount]
  public func digitalOnly() -> [MCIAccount]
  public func allowedWithdrawalOnly() -> [MCIAccount]
  public func allowedPaymentOnly() -> [MCIAccount]
  public func allowedMarketPlaceOnly() -> [MCIAccount]
}
final public class Api99Transaction : Swift.Codable {
  final public var id: Swift.String {
    get
  }
  final public var amount: Swift.String {
    get
  }
  final public var receipt: Swift.String {
    get
  }
  final public var address: Api99Address? {
    get
  }
  final public var location: Api99TransactionLocation? {
    get
  }
  final public var createAt: Foundation.Date {
    get
  }
  final public var merchantId: Swift.String? {
    get
  }
  final public var merchant: MCIMerchant? {
    get
  }
  final public var formattedAmount: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
final public class Api99TransactionLocation : Swift.Codable {
  final public var latitude: Swift.Double {
    get
  }
  final public var longitude: Swift.Double {
    get
  }
  final public var horizontalAccurancy: Swift.Double {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension CLLocationCoordinate2D : Swift.Equatable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
}
extension CLLocationCoordinate2D {
  public static let zero: CoreLocation.CLLocationCoordinate2D
  public func rect(with location: CoreLocation.CLLocationCoordinate2D) -> MapKit.MKMapRect
  public var region: MapKit.MKCoordinateRegion {
    get
  }
}
public enum MCIIssuerProductType : Swift.String, Swift.Codable {
  case unknown
  case credit
  case debit
  case prepaid
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum MCIIssuerProductStatus : Swift.String, Swift.Codable {
  case unknown
  case quiz
  case onboarding
  case onboardingV2
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum MCIDocumentType : Swift.String, Swift.Codable {
  case rg
  case cnh
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class MCIIssuerProductData : Swift.Codable {
  final public var status: Swift.String? {
    get
  }
  final public var imageDocFront: Swift.Bool {
    get
  }
  final public var imageDocBack: Swift.Bool {
    get
  }
  final public var imageSelfie: Swift.Bool {
    get
  }
  final public var imageSignature: Swift.Bool {
    get
  }
  final public var documentType: MCIDocumentType? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIIssuerProduct : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var type: MCIIssuerProductType {
    get
  }
  final public var description: Swift.String? {
    get
  }
  final public var status: MCIIssuerProductStatus {
    get
  }
  final public var data: MCIIssuerProductData? {
    get
  }
  final public var allowWithdrawal: Swift.Bool {
    get
  }
  final public var allowPayment: Swift.Bool {
    get
  }
  final public var allowMarketplace: Swift.Bool {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MCIIssuerProduct : Swift.Equatable {
  public static func == (lhs: MCIIssuerProduct, rhs: MCIIssuerProduct) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class MCICustomerAccountQuizSuccess : Swift.Codable {
  final public var successTitle: Swift.String? {
    get
  }
  final public var successMessage: Swift.String? {
    get
  }
  final public var successDismissTitle: Swift.String? {
    get
  }
  final public var account: MCIAccount? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum Api99AddressType : Swift.String {
  case company
  case home
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Api99AddressType : Swift.Codable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class Api99UserAddress : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var type: Api99AddressType? {
    get
  }
  final public var address: Api99Address? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension Api99UserAddress {
  convenience public init(address: Api99Address, type: Api99AddressType)
  final public func copy(with address: Api99Address) -> Api99UserAddress
  final public func copy(with name: Swift.String, reference: Swift.String) -> Api99UserAddress
}
@_hasMissingDesignatedInitializers final public class Api99Address {
  final public var latitude: Swift.Double {
    get
  }
  final public var longitude: Swift.Double {
    get
  }
  final public var fullAddress: Swift.String {
    get
  }
  final public var number: Swift.String {
    get
  }
  final public var reference: Swift.String {
    get
  }
  @objc deinit
}
extension Api99Address {
  final public func copy() -> Api99Address
}
extension Api99Address : Swift.Codable {
  convenience public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension Api99Address {
  final public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  convenience public init(_ placemark: MapPlace)
  convenience public init(_ placemark: CoreLocation.CLPlacemark)
}
@_hasMissingDesignatedInitializers final public class MCICustomerAccountQuiz : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var quiz: [MCICustomerAccountQuizQuestion]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCICustomerAccountQuizQuestion : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var question: Swift.String? {
    get
  }
  final public var answers: [Swift.String]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCICustomerAccountSelectedAnswer : Swift.Codable {
  final public var questionId: Swift.String? {
    get
  }
  final public var answer: Swift.String? {
    get
  }
  public init(questionId: Swift.String, answer: Swift.String)
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public typealias MCIResult<Data> = (Swift.Result<Data, Foundation.NSError>) -> Swift.Void
@_hasMissingDesignatedInitializers final public class MCICashInBankSlip : Swift.Codable {
  final public var transactionId: Swift.String? {
    get
  }
  final public var barCode: Swift.String? {
    get
  }
  final public var amount: Swift.String? {
    get
  }
  final public var dueDate: Foundation.Date? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum MCIPLInvoiceReceiptEmailStatus : Swift.String, Swift.Codable {
  case enabled
  case disabled
  case pending
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum MCIPLServiceInvoiceReceiptOption : Swift.String, Swift.Codable {
  case email
  case sms
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCIPLServiceInvoiceReceipt : Swift.Codable {
  final public var email: MCIPLInvoiceReceiptEmail? {
    get
  }
  final public var sms: MCIPLInvoiceReceiptSMS? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIPLInvoiceReceiptEmail : Swift.Codable {
  final public var address: Swift.String? {
    get
  }
  final public var status: MCIPLInvoiceReceiptEmailStatus?
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIPLInvoiceReceiptSMS : Swift.Codable {
  final public var phoneNumber: Swift.String? {
    get
  }
  final public var enabled: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
extension UIApplication {
  public static var name: Swift.String?
  public static var version: Swift.String?
  public class func applicationName() -> Swift.String
  public class func applicationVersion() -> Swift.String
}
extension String : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum BillPaymentType : Swift.String, Swift.Codable {
  case unknown
  case invalid
  case dealership
  case bankslip
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class BillPaymentValidation : Swift.Codable {
  final public var type: BillPaymentType {
    get
  }
  final public var assignor: Swift.String? {
    get
  }
  final public var company: Swift.String? {
    get
  }
  final public var dueDate: Swift.String? {
    get
  }
  final public var amount: Swift.String? {
    get
  }
  final public func description() -> Swift.String
  final public func formattedAmount() -> Swift.String
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCISubCategory : Swift.Codable {
  final public var id: Swift.String {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var merchants: [MCIMerchant]?
  final public var numberOfMerchants: Swift.Int {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCILocation {
  final public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  final public var horizontalAccuracy: Swift.Double {
    get
  }
  final public var timestamp: Foundation.Date {
    get
  }
  final public func asCLLocation() -> CoreLocation.CLLocation
  @objc deinit
}
public enum MCICategoryType : Swift.String {
  case voucher
  case cellphoneRecharge
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICategoryType : Swift.Codable {
}
final public class MCICategory : Swift.Codable {
  final public var id: Swift.String {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var imageUrl: Swift.String {
    get
  }
  final public var bannerUrl: Swift.String {
    get
  }
  final public var type: MCICategoryType {
    get
  }
  final public var description: Swift.String? {
    get
  }
  final public var subcategories: [MCISubCategory] {
    get
  }
  final public var numberOfSubcategories: Swift.Int {
    get
  }
  final public var numberOfMerchants: Swift.Int {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MCIFoundation {
  final public func requestIssuers(failure: @escaping (Foundation.NSError) -> Swift.Void = { _ in }, success: @escaping ([MCIIssuer]) -> Swift.Void = { _ in })
}
final public class MCIVoucherAmount : Swift.Codable {
  final public var amount: Swift.String {
    get
  }
  final public var title: Swift.String? {
    get
  }
  public init(amount: Swift.String, title: Swift.String?)
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIVoucherAmountsRange : Swift.Codable {
  final public var minRange: Swift.String {
    get
  }
  final public var maxRange: Swift.String {
    get
  }
  final public var min: Swift.Double {
    get
  }
  final public var max: Swift.Double {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIVoucher : Swift.Codable {
  final public var transactionId: Swift.String? {
    get
  }
  final public var amounts: [MCIVoucherAmount]? {
    get
  }
  final public var amountsRange: MCIVoucherAmountsRange? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchantLocation : Swift.Codable {
  final public var latitude: Swift.Double? {
    get
  }
  final public var longitude: Swift.Double? {
    get
  }
  final public var distance: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchantAddress : Swift.Codable {
  final public var short: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class Api99Position : Swift.Codable {
  final public var latitude: Swift.Double? {
    get
  }
  final public var longitude: Swift.Double? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Api99Route : Swift.Codable {
  final public var time: Swift.Int? {
    get
  }
  final public var distance: Swift.Int? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class Api99Driver : Swift.Codable {
  final public var driverID: Swift.Int? {
    get
  }
  final public var fullName: Swift.String? {
    get
  }
  final public var phoneNumber: Swift.String? {
    get
  }
  final public var carModel: Swift.String? {
    get
  }
  final public var carPlate: Swift.String? {
    get
  }
  final public var photo: Swift.String? {
    get
  }
  final public var position: Api99Position? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class Api99Running : Swift.Codable {
  final public var rideId: Swift.String? {
    get
  }
  final public var jobId: Swift.String? {
    get
  }
  final public var driver: Api99Driver? {
    get
  }
  final public var route: Api99Route? {
    get
  }
  final public var smsStartedSent: Swift.Bool? {
    get
  }
  final public var smsDriverCanceledSent: Swift.Bool? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class Api99RideStatus : Swift.Codable {
  final public var employeeId: Swift.Int? {
    get
  }
  final public var from: Api99Address? {
    get
  }
  final public var phoneNumber: Swift.String? {
    get
  }
  final public var costCenterId: Swift.Int? {
    get
  }
  final public var categoryId: Api99CategoryType? {
    get
  }
  final public var to: Api99Address? {
    get
  }
  final public var projectId: Swift.Int? {
    get
  }
  final public var status: Api99Status? {
    get
  }
  final public var running: Api99Running? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum Api99Status : Swift.String {
  case waitingDriversAnswers
  case couldntFindAvailableDrivers
  case driversRejected
  case carOnTheWay
  case waitingForPassenger
  case carArrived
  case canceledByDriver
  case canceledByPassenger
  case rideEnded
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Api99Status : Swift.CustomStringConvertible, Swift.Codable {
  public var description: Swift.String {
    get
  }
  public var inProgress: Swift.Bool {
    get
  }
}
extension MCIFoundation {
  final public func requestAllBanks(completion: @escaping (Swift.Result<[MCIBank], Foundation.NSError>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class MCISecurityController {
  public static let shared: MCISecurityController
  final public func compare(password: Swift.String?) -> (equal: Swift.Bool, locked: Swift.Bool)
  @objc deinit
}
extension MCISecurityController {
  final public func biometryIsAvailable() -> Swift.Bool
  final public func performBiometryValidation(failureBlock: @escaping (Foundation.NSError, Swift.Bool) -> Swift.Void = { _,_ in }, successBlock: @escaping () -> Swift.Void = {})
}
extension MCISecurityController {
  public enum SelfieValidation : Swift.Error {
    case invalidImage
    case noFaceDetected
    case moreThanOneFaceDetected
    case processingFailed
    case eyesNotDetected
    case eyesClosed
    case mouthNotDetected
    public static func == (a: MCISecurityController.SelfieValidation, b: MCISecurityController.SelfieValidation) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public func validate(selfie: UIKit.UIImage?) throws
  final public func validate(editingEmail: Swift.String?) -> Swift.Bool
  final public func validate(email: Swift.String?) -> Swift.Bool
  final public func validate(cpf: Swift.String?) -> Swift.Bool
  final public func validate(cnpj: Swift.String?) -> Swift.Bool
  final public func validate(phone: Swift.String?) -> Swift.Bool
  final public func validate(date: Swift.String?) -> Swift.Bool
  final public func validate(zipCode: Swift.String?) -> Swift.Bool
  final public func validate(numberId: Swift.String?) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class MCIKeychainController {
  public static let shared: MCIKeychainController
  final public func registerCurrentSession(session: MCISession?, password: Swift.String?)
  final public func updateCurrentSession()
  final public func updatePassword(_ password: Swift.String?)
  @objc deinit
}
final public class MCIAccounWalletUI : Swift.Codable {
  final public var textTintColor: UIKit.UIColor {
    get
  }
  final public var backgroundColor: UIKit.UIColor {
    get
  }
  final public var iconTintColor: UIKit.UIColor {
    get
  }
  final public var actionTintColor: UIKit.UIColor {
    get
  }
  final public var limitBackgroundColor: UIKit.UIColor {
    get
  }
  final public var limitLabelTintColor: UIKit.UIColor {
    get
  }
  final public var limitValueTintColor: UIKit.UIColor {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIAccountUI : Swift.Codable {
  final public var backgroundColor: UIKit.UIColor {
    get
  }
  final public var iconUrl: Swift.String {
    get
  }
  final public var wallet: MCIAccounWalletUI? {
    get
  }
  public init(backgroundColor: UIKit.UIColor, iconUrl: Swift.String)
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCISupport : Swift.Codable {
  final public var email: Swift.String? {
    get
  }
  final public var eula: Swift.String? {
    get
  }
  final public var subject: Swift.String? {
    get
  }
  final public var acceptedCards: Swift.String? {
    get
  }
  final public var accountLimits: Swift.String? {
    get
  }
  final public var contactUs: MCISupportContact? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIPlacedMerchant : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var description: Swift.String? {
    get
  }
  final public var location: MCIMerchantLocation? {
    get
  }
  final public var address: MCIMerchantAddress? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIBank : Swift.Codable {
  final public var id: Swift.Int? {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var description: Swift.String? {
    get
  }
  final public var digit: Swift.String? {
    get
  }
  final public var ispb: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class Api99Budget : Swift.Codable {
  final public var transactionId: Swift.String? {
    get
  }
  final public var categories: [Api99Category]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MapDirections : Swift.Codable {
  final public var origin: MapPlace? {
    get
  }
  final public var destination: MapPlace? {
    get
  }
  final public var steps: [MapCoordinate]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIAccountLimits : Swift.Codable {
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension String {
  public func toCurrency() -> Swift.String?
  public func toUncurrency() -> Swift.String?
}
@_hasMissingDesignatedInitializers final public class MCIInjectionController {
  public static let shared: MCIInjectionController
  final public func register<T>(_ type: T.Type, resolver: @escaping (() -> T))
  final public func resolve<T>() throws -> T?
  @objc deinit
}
final public class MCIIssuerUI : Swift.Codable {
  final public var backgroundColor: UIKit.UIColor {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCIIssuerDeprecated : Swift.Codable {
  final public var description: Swift.String? {
    get
  }
  final public var urlLogo: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIIssuer : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var iconUrl: Swift.String? {
    get
  }
  final public var products: [MCIIssuerProduct]?
  final public var ui: MCIIssuerUI? {
    get
  }
  final public var deprecated: MCIIssuerDeprecated? {
    get
  }
  final public var primaryColor: UIKit.UIColor {
    get
  }
  final public var secondaryColor: UIKit.UIColor {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MCIIssuer : Swift.Equatable {
  public static func == (lhs: MCIIssuer, rhs: MCIIssuer) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class MCIHome : Swift.Codable {
  final public var issuers: [MCIIssuer]? {
    get
  }
  final public var merchants: [MCIMerchant]?
  final public var categories: [MCICategory]?
  final public var favorites: [MCIMerchant]? {
    get
  }
  final public var popular: [MCIMerchant]? {
    get
  }
  final public var settings: MCISettings? {
    get
  }
  final public var support: MCISupport? {
    get
  }
  @objc deinit
}
extension MCIHome {
  final public func encode(to encoder: Swift.Encoder) throws
  convenience public init(from decoder: Swift.Decoder) throws
}
extension MCIHome {
  final public func sanitize()
}
final public class MCIMarketplaceAccountLimit : Swift.Codable {
  final public var showBoxDetail: Swift.Bool? {
    get
  }
  final public var availableLimit: Swift.String? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case showBoxDetail
    case availableLimit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension String {
  public static let keyApplicationRegistered: Swift.String
  public static let keyPushToken: Swift.String
  public static let keyPushTokenRegistered: Swift.String
  public static let keyPayOnboardViewed: Swift.String
  public static let keyPixOnboardViewed: Swift.String
  public static let keyPixHomeViewed: Swift.String
}
extension UserDefaults {
  public func isApplicationRegistered() -> Swift.Bool
  public func registerApplication()
  public func set(pushToken: Swift.String)
  public func pushToken() -> Swift.String?
  public func set(pushTokenRegistered: Swift.Bool)
  public func pushTokenRegistered() -> Swift.Bool
}
final public class MCIWithdrawAccountLimit : Swift.Codable {
  final public var showBoxDetail: Swift.Bool? {
    get
  }
  final public var availableLimit: Swift.String? {
    get
  }
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case showBoxDetail
    case availableLimit
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCISettings : Swift.Codable {
  final public var home: MCIHomeSettings? {
    get
  }
  final public var wallet: MCIWalletSettings? {
    get
  }
  final public var availability: MCIAvailabilitySettings? {
    get
  }
  final public var messages: MCIMessageError? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCIHomeSettings : Swift.Codable {
  final public var categories: Swift.Int {
    get
  }
  final public var favorites: Swift.Int {
    get
  }
  final public var popular: Swift.Int {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCIWalletSettings : Swift.Codable {
  final public var cashIn: MCICashInSettings? {
    get
  }
  final public var cashOut: MCICashOutSettings? {
    get
  }
  final public var quiz: MCIQuizSettings? {
    get
  }
  final public var virtualCard: MCIVirtualCardSettings? {
    get
  }
  final public var pix: MCIPixSettings? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCICashInSettings : Swift.Codable {
  final public var bankSlipMinValue: Swift.Double {
    get
  }
  final public var bankSlipMaxValue: Swift.Double {
    get
  }
  final public var bankSlipFee: Swift.Double {
    get
  }
  final public var bankSlipFree: Swift.Int {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCICashOutSettings : Swift.Codable {
  final public var p2pMinValue: Swift.Double {
    get
  }
  final public var p2pMaxValue: Swift.Double {
    get
  }
  final public var tedMinValue: Swift.Double {
    get
  }
  final public var tedMaxValue: Swift.Double {
    get
  }
  final public var tedFee: Swift.Double {
    get
  }
  final public var withdrawalMinValue: Swift.Double {
    get
  }
  final public var withdrawalMaxValue: Swift.Double {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIQuizSettings : Swift.Codable {
  final public var timerInSeconds: Swift.Int {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIVirtualCardSettings : Swift.Codable {
  final public var virtualCardRefreshTime: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixSettings : Swift.Codable {
  final public var transfer: MCIPixTransferSettings? {
    get
  }
  final public var qrCode: MCIPixQrCodeSettings? {
    get
  }
  final public var home: MCIPixHomeSettings? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixTransferSettings : Swift.Codable {
  final public var minValue: Swift.Double? {
    get
  }
  final public var maxValue: Swift.Double? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixQrCodeSettings : Swift.Codable {
  final public var minValue: Swift.Double? {
    get
  }
  final public var maxValue: Swift.Double? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixHomeSettings : Swift.Codable {
  final public var ui: MCIPixHomeUISettings? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCIPixHomeUISettings : Swift.Codable {
  final public var topCircleColor: Swift.String? {
    get
  }
  final public var topTextColor: Swift.String? {
    get
  }
  final public var topKeyColor: Swift.String? {
    get
  }
  final public var topBackgroundColor: Swift.String? {
    get
  }
  final public var centerButtonColor: Swift.String? {
    get
  }
  final public var centerBackgroundColor: Swift.String? {
    get
  }
  final public var bottomBackgroundColor: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCIAvailabilitySettings : Swift.Codable {
  final public var faq: Swift.Bool? {
    get
  }
  final public var payment: MCIAvailabilityPaymentSettings? {
    get
  }
  final public var availableTabs: MCIAvailabilityHomeTab? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIAvailabilityPaymentSettings : Swift.Codable {
  final public var qrcode: MCIAvailabilityQRCodeSettings? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIAvailabilityQRCodeSettings : Swift.Codable {
  final public var reading: MCIAvailabilityQRCodeReadingSettings? {
    get
  }
  final public var writing: MCIAvailabilityQRCodeWritingSettings? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIAvailabilityQRCodeReadingSettings : Swift.Codable {
  final public var enabled: Swift.Bool? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIAvailabilityQRCodeWritingSettings : Swift.Codable {
  final public var enabled: Swift.Bool? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIAvailabilityHomeTab : Swift.Codable {
  final public var marketplace: Swift.Bool? {
    get
  }
  final public var payment: Swift.Bool? {
    get
  }
  final public var wallet: Swift.Bool? {
    get
  }
  final public var withdraw: Swift.Bool? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMessageError : Swift.Codable {
  final public var defaultError: MCIDefaultError? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIDefaultError : Swift.Codable {
  final public var title: Swift.String? {
    get
  }
  final public var body: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MCICardIssuanceStatus : Swift.String, Swift.Codable {
  case unknown
  case pending
  case paid
  case complete
  case expired
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCICardIssuance : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var externalId: Swift.String? {
    get
  }
  final public var invoiceId: Swift.String? {
    get
  }
  final public var deliveredDate: Swift.String? {
    get
  }
  final public var paymentDate: Swift.String? {
    get
  }
  final public var paymentAmount: Swift.String? {
    get
  }
  final public var paymentSource: Swift.String? {
    get
  }
  final public var status: MCICardIssuanceStatus {
    get
  }
  final public var parsedDeliveredDate: Foundation.Date? {
    get
  }
  final public var parsedPaymentDate: Foundation.Date? {
    get
  }
  final public var formattedPaymentDate: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum MCICardIssuanceDeliveryMode : Swift.String, Swift.Codable {
  case unknown
  case delivery
  case pickupOnIssuer
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
final public class MCICardIssuancePayment : Swift.Codable {
  final public var cost: Swift.String? {
    get
  }
  final public var balanceAmount: Swift.String? {
    get
  }
  final public var availableLimit: Swift.String? {
    get
  }
  final public var deliveryMode: MCICardIssuanceDeliveryMode {
    get
  }
  final public var balanceSources: [MCIAccountType]? {
    get
  }
  final public var paymentSources: [MCIAccountType]? {
    get
  }
  final public var costDouble: Swift.Double {
    get
  }
  final public var balanceAmountDouble: Swift.Double {
    get
  }
  final public var availableLimitDouble: Swift.Double {
    get
  }
  final public var requiredCheckInValue: Swift.Double {
    get
  }
  final public var hasSufficientBalance: Swift.Bool {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCICardIssuancePrivateLabel : Swift.Codable {
  final public var issuerId: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCICardIssuanceResponse : Swift.Codable {
  final public var cardIssuance: MCICardIssuance? {
    get
  }
  final public var cardIssuancePayment: MCICardIssuancePayment? {
    get
  }
  final public var cardIssuancePrivateLabel: MCICardIssuancePrivateLabel? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
public enum MCIMerchantActionType : Swift.String {
  case unknown
  case app
  case www
  case dynamicURL
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCIMerchantActionType : Swift.Codable {
}
public enum MCIMerchantServiceType : Swift.String {
  case api99
  case cellphoneRecharge
  case none
  case tvRecharge
  case uber
  case unknown
  case voucher
  case offline
  case online
  case webview
  public static let supported: [MCIMerchantServiceType]
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCIMerchantServiceType : Swift.Codable {
}
final public class MCIMerchantSimpleAction : Swift.Codable {
  final public var type: MCIMerchantActionType {
    get
  }
  final public var title: Swift.String? {
    get
  }
  final public var url: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MCIMerchantAction : Swift.Codable {
  final public var title: Swift.String? {
    get
  }
  final public var type: MCIMerchantActionType? {
    get
  }
  final public var callToActionTitle: Swift.String? {
    get
  }
  final public var callToActionUrl: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchantCallToAction : Swift.Codable {
  final public var buttons: [MCIMerchantAction]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchantUrls : Swift.Codable {
  final public var icon: Swift.String? {
    get
  }
  final public var banner: Swift.String? {
    get
  }
  final public var terms: Swift.String? {
    get
  }
  final public var tutorial: Swift.String? {
    get
  }
  final public var webview: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchantDeprecated : Swift.Codable {
  final public var urlLogo: Swift.String? {
    get
  }
  final public var urlThumb: Swift.String? {
    get
  }
  final public var urlReceipt: Swift.String? {
    get
  }
  final public var urlStatement: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCIMerchant {
  final public var id: Swift.String? {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var description: Swift.String? {
    get
  }
  final public var serviceType: MCIMerchantServiceType {
    get
  }
  final public var urls: MCIMerchantUrls? {
    get
  }
  final public var action: MCIMerchantSimpleAction? {
    get
  }
  final public var deprecated: MCIMerchantDeprecated? {
    get
  }
  final public var howToUse: Swift.String? {
    get
  }
  final public var categories: Swift.String {
    get
  }
  final public var participatingStores: Swift.Bool {
    get
  }
  @objc deinit
}
extension MCIMerchant : Swift.Codable {
  final public func encode(to encoder: Swift.Encoder) throws
  convenience public init(from decoder: Swift.Decoder) throws
}
extension MCIMerchant : Swift.Equatable {
  public static func == (lhs: MCIMerchant, rhs: MCIMerchant) -> Swift.Bool
}
extension MCIMerchant {
  final public class func from(merchantTransaction: MCICustomerMerchantTransaction) -> MCIMerchant
}
final public class MCIAuthenticationState : Swift.Codable {
  final public var id: Swift.String {
    get
  }
  final public var status: MCICustomerAuthenticationType {
    get
  }
  public init()
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension TimeZone {
  public static let zero: Foundation.TimeZone?
  public static let utc: Foundation.TimeZone?
}
extension Locale {
  public static let ptBr: Foundation.Locale
  public static let enUs: Foundation.Locale
}
extension DateFormatter {
  public static let iso3339: Foundation.DateFormatter
  public static let iso3339wz: Foundation.DateFormatter
  public static let iso8601: Foundation.DateFormatter
  public static let shortYearMonth: Foundation.DateFormatter
  public static let shortYearMonthDay: Foundation.DateFormatter
  public static let monthYear: Foundation.DateFormatter
  public static let month: Foundation.DateFormatter
  public static let dayMonth: Foundation.DateFormatter
  public static let shortDayMonth: Foundation.DateFormatter
  public static let shortDayMonthYear: Foundation.DateFormatter
  public static let longDayMonthYear: Foundation.DateFormatter
  public static let brazilianDate: Foundation.DateFormatter
  public static let pixDate: Foundation.DateFormatter
  public static let shortBrazilianDate: Foundation.DateFormatter
  public static let shortExpiration: Foundation.DateFormatter
  public static let longExpiration: Foundation.DateFormatter
  public static let brazilianDateWithTime: Foundation.DateFormatter
  public static let fullBrazilianDateWithTime: Foundation.DateFormatter
  public static let hour: Foundation.DateFormatter
  public static let hourMilliseconds: Foundation.DateFormatter
  public static let time: Foundation.DateFormatter
  public static let awsDate: Foundation.DateFormatter
  public static let awsShortDate: Foundation.DateFormatter
  public static let year: Foundation.DateFormatter
}
public protocol MCIAdditionalHeaderDelegate {
  func headers() -> [Swift.String : Swift.String]?
}
extension UIDevice {
  public class func deviceIdentifier() -> Swift.String
  public func userAgent() -> Swift.String
  public func isJailbroken() -> (is: Swift.Bool, cause: Swift.String)
}
@_hasMissingDesignatedInitializers final public class MapPlace : Swift.Codable {
  final public var name: Swift.String? {
    get
  }
  final public var address: Swift.String? {
    get
  }
  final public var formattedAddress: Swift.String? {
    get
  }
  final public var number: Swift.String? {
    get
  }
  final public var coordinate: MapCoordinate? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension MapPlace {
  convenience public init(_ geocode: MapReverseGeocode)
}
final public class MCITvRechargeTransaction : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var amount: Swift.Double? {
    get
  }
  final public var createdAt: Foundation.Date? {
    get
  }
  final public var receipt: Swift.String? {
    get
  }
  final public var contract: Swift.String? {
    get
  }
  final public var merchantId: Swift.String? {
    get
  }
  final public var merchant: MCIMerchant? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MCICashInType : Swift.String {
  case cashIn
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICashInType : Swift.Codable {
}
public enum MCICashInMethod : Swift.String {
  case bankSlip
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICashInMethod : Swift.Codable {
}
public enum MCICashInStatus : Swift.String {
  case unknown
  case confirmed
  case pending
  case expired
  case failed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICashInStatus : Swift.Codable {
}
extension MCICashInStatus : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
final public class MCICashIn : Swift.Codable {
  final public var transactionId: Swift.String? {
    get
  }
  final public var amount: Swift.String? {
    get
  }
  final public var barCode: Swift.String? {
    get
  }
  final public var dueDate: Foundation.Date? {
    get
  }
  final public var documentDate: Foundation.Date? {
    get
  }
  final public var status: MCICashInStatus {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MCICashIn {
  final public func convertTo() -> MCICashInBankSlip
}
public enum MCICustomerAccountTokenError : Swift.Error {
  case genericError(Swift.String)
  case invalidURLScheme
  case invalidTimerPeriod(Swift.String)
  case invalidDigits(Swift.String)
  case invalidSecret(Swift.String)
  case missingSecret
  case invalidExpirationDate
}
final public class MCICustomerAccountToken : Swift.Codable {
  final public var expirationDate: Foundation.Date {
    get
  }
  final public var currentPassword: Swift.String? {
    get
  }
  final public var remainingSeconds: Swift.String {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
extension MCICustomerAccountToken : Swift.Equatable {
  public static func == (lhs: MCICustomerAccountToken, rhs: MCICustomerAccountToken) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class MCITvRecharge : Swift.Codable {
  final public var transactionId: Swift.String? {
    get
  }
  final public var amounts: [Swift.String]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
extension Data {
  public var decrypt: Foundation.Data {
    get
  }
}
public enum Api99CategoryType : Swift.String {
  case regularTaxi
  case turboTaxi
  case top99
  case pop99
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension Api99CategoryType : Swift.Codable {
}
final public class Api99Category : Swift.Codable {
  final public var id: Api99CategoryType? {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var eta: Swift.Int? {
    get
  }
  final public var lowerFare: Swift.String? {
    get
  }
  final public var upperFare: Swift.String? {
    get
  }
  final public var currencyCode: Swift.String? {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MCISupportOptionType {
  case email
  case phone
  case whatsapp
  case callcenter
  public static func == (a: MCISupportOptionType, b: MCISupportOptionType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol MCISupportOption {
  var available: Swift.Bool { get }
  var title: Swift.String? { get }
  var type: MCISupportOptionType { get }
}
@_hasMissingDesignatedInitializers final public class MCISupportContact : Swift.Codable {
  final public var email: MCISupportContactByEmail? {
    get
  }
  final public var phone: MCISupportContactByPhone? {
    get
  }
  final public var whatsapp: MCISupportContactByWhatsapp? {
    get
  }
  final public var callcenter: MCISupportContactByCallcenter? {
    get
  }
  final public var availableOptions: [MCISupportOption] {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCISupportContactByEmail : MCISupportOption, Swift.Codable {
  final public var available: Swift.Bool {
    get
  }
  final public var title: Swift.String? {
    get
  }
  final public var email: Swift.String? {
    get
  }
  final public var subject: Swift.String? {
    get
  }
  final public var type: MCISupportOptionType {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCISupportContactByPhone : MCISupportOption, Swift.Codable {
  final public var available: Swift.Bool {
    get
  }
  final public var title: Swift.String? {
    get
  }
  final public var numbers: [MCISupportPhoneNumber]? {
    get
  }
  final public var type: MCISupportOptionType {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCISupportContactByCallcenter : MCISupportOption, Swift.Codable {
  final public var available: Swift.Bool {
    get
  }
  final public var title: Swift.String? {
    get
  }
  final public var url: Swift.String? {
    get
  }
  final public var type: MCISupportOptionType {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCISupportContactByWhatsapp : MCISupportOption, Swift.Codable {
  final public var available: Swift.Bool {
    get
  }
  final public var title: Swift.String? {
    get
  }
  final public var url: Swift.String? {
    get
  }
  final public var type: MCISupportOptionType {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCISupportPhoneNumber : Swift.Codable {
  final public var title: Swift.String? {
    get
  }
  final public var number: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers final public class MCICellphoneRecharge : Swift.Codable {
  final public var transactionId: Swift.String? {
    get
  }
  final public var amounts: [Swift.String]? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public enum MCICustomerTransactionStatus : Swift.String {
  case pending
  case confirmed
  case reverted
  case canceled
  case expired
  case none
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICustomerTransactionStatus : Swift.Codable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum MCICustomerTransactionType : Swift.String {
  case purchase
  case reversal
  case unknown
  case installment
  case adjustment
  case none
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension MCICustomerTransactionType : Swift.Codable, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class MCICustomerMerchantTransaction : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var name: Swift.String? {
    get
  }
  final public var icon: Swift.String? {
    get
  }
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
final public class MCICustomerTransaction : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var amount: Swift.String {
    get
  }
  final public var date: Foundation.Date {
    get
  }
  final public var merchantId: Swift.String? {
    get
  }
  final public var merchant: MCICustomerMerchantTransaction? {
    get
  }
  final public var type: MCICustomerTransactionType {
    get
  }
  final public var status: MCICustomerTransactionStatus {
    get
  }
  final public var currency: Swift.String? {
    get
  }
  final public var numberOfInstallments: Swift.UInt? {
    get
  }
  final public var adjustmentDescription: Swift.String? {
    get
  }
  final public var reversalTransactionID: Swift.String? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  final public func formattedAmount() -> Swift.String
  @objc deinit
}
extension MCICustomerTransaction : Swift.Equatable {
  public static func == (lhs: MCICustomerTransaction, rhs: MCICustomerTransaction) -> Swift.Bool
}
public enum MCIBalanceStatus : Swift.String, Swift.Codable {
  case online
  case offline
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class MCIBalance : Swift.Codable {
  final public var currencyLimit: Swift.String {
    get
  }
  final public var status: MCIBalanceStatus {
    get
  }
  final public var accountLimit: MCIAccountLimits? {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
final public class MCICustomer : Swift.Codable {
  final public var id: Swift.String? {
    get
  }
  final public var status: MCICustomerAuthenticationType? {
    get
  }
  final public var name: Swift.String {
    get
  }
  final public var cpf: Swift.String {
    get
  }
  final public var email: Swift.String {
    get
  }
  final public var phoneNumber: Swift.String
  final public var firstName: Swift.String {
    get
  }
  final public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
}
extension MCICustomer : Swift.Equatable {
  public static func == (lhs: MCICustomer, rhs: MCICustomer) -> Swift.Bool
}
extension ModuleCheckout : Swift.Equatable {}
extension ModuleCheckout : Swift.Hashable {}
extension MCIFoundationSource : Swift.Equatable {}
extension MCIFoundationSource : Swift.Hashable {}
extension MCIFoundationSource : Swift.RawRepresentable {}
extension MCIFaqGroupStatus : Swift.Equatable {}
extension MCIFaqGroupStatus : Swift.Hashable {}
extension MCIFaqGroupStatus : Swift.RawRepresentable {}
extension MCIAccountWalletActionService : Swift.Equatable {}
extension MCIAccountWalletActionService : Swift.Hashable {}
extension MCIAccountWalletActionService : Swift.RawRepresentable {}
extension MCIAccountWalletActionType : Swift.Equatable {}
extension MCIAccountWalletActionType : Swift.Hashable {}
extension MCIAccountWalletActionType : Swift.RawRepresentable {}
extension Api99DataStatus : Swift.Equatable {}
extension Api99DataStatus : Swift.Hashable {}
extension Api99DataStatus : Swift.RawRepresentable {}
extension Api99DataCategory : Swift.Equatable {}
extension Api99DataCategory : Swift.Hashable {}
extension Api99DataCategory : Swift.RawRepresentable {}
extension MCIPayAccountLimit.CodingKeys : Swift.Equatable {}
extension MCIPayAccountLimit.CodingKeys : Swift.Hashable {}
extension MCIPayAccountLimit.CodingKeys : Swift.RawRepresentable {}
extension MCIWalletLimits.CodingKeys : Swift.Equatable {}
extension MCIWalletLimits.CodingKeys : Swift.Hashable {}
extension MCIWalletLimits.CodingKeys : Swift.RawRepresentable {}
extension MCIFaqQuestionStatus : Swift.Equatable {}
extension MCIFaqQuestionStatus : Swift.Hashable {}
extension MCIFaqQuestionStatus : Swift.RawRepresentable {}
extension MCIExternalAccountLimit.CodingKeys : Swift.Equatable {}
extension MCIExternalAccountLimit.CodingKeys : Swift.Hashable {}
extension MCIExternalAccountLimit.CodingKeys : Swift.RawRepresentable {}
extension MCICustomerAuthenticationType : Swift.Equatable {}
extension MCICustomerAuthenticationType : Swift.Hashable {}
extension MCICustomerAuthenticationType : Swift.RawRepresentable {}
extension MCIAccountType : Swift.Equatable {}
extension MCIAccountType : Swift.Hashable {}
extension MCIAccountType : Swift.RawRepresentable {}
extension MCICustomerAccountStatus : Swift.Equatable {}
extension MCICustomerAccountStatus : Swift.Hashable {}
extension MCICustomerAccountStatus : Swift.RawRepresentable {}
extension MCIIssuerProductType : Swift.Equatable {}
extension MCIIssuerProductType : Swift.Hashable {}
extension MCIIssuerProductType : Swift.RawRepresentable {}
extension MCIIssuerProductStatus : Swift.Equatable {}
extension MCIIssuerProductStatus : Swift.Hashable {}
extension MCIIssuerProductStatus : Swift.RawRepresentable {}
extension MCIDocumentType : Swift.Equatable {}
extension MCIDocumentType : Swift.Hashable {}
extension MCIDocumentType : Swift.RawRepresentable {}
extension Api99AddressType : Swift.Equatable {}
extension Api99AddressType : Swift.Hashable {}
extension Api99AddressType : Swift.RawRepresentable {}
extension MCIPLInvoiceReceiptEmailStatus : Swift.Equatable {}
extension MCIPLInvoiceReceiptEmailStatus : Swift.Hashable {}
extension MCIPLInvoiceReceiptEmailStatus : Swift.RawRepresentable {}
extension MCIPLServiceInvoiceReceiptOption : Swift.Equatable {}
extension MCIPLServiceInvoiceReceiptOption : Swift.Hashable {}
extension MCIPLServiceInvoiceReceiptOption : Swift.RawRepresentable {}
extension BillPaymentType : Swift.Equatable {}
extension BillPaymentType : Swift.Hashable {}
extension BillPaymentType : Swift.RawRepresentable {}
extension MCICategoryType : Swift.Equatable {}
extension MCICategoryType : Swift.Hashable {}
extension MCICategoryType : Swift.RawRepresentable {}
extension Api99Status : Swift.Equatable {}
extension Api99Status : Swift.Hashable {}
extension Api99Status : Swift.RawRepresentable {}
extension MCISecurityController.SelfieValidation : Swift.Equatable {}
extension MCISecurityController.SelfieValidation : Swift.Hashable {}
extension MCIMarketplaceAccountLimit.CodingKeys : Swift.Equatable {}
extension MCIMarketplaceAccountLimit.CodingKeys : Swift.Hashable {}
extension MCIMarketplaceAccountLimit.CodingKeys : Swift.RawRepresentable {}
extension MCIWithdrawAccountLimit.CodingKeys : Swift.Equatable {}
extension MCIWithdrawAccountLimit.CodingKeys : Swift.Hashable {}
extension MCIWithdrawAccountLimit.CodingKeys : Swift.RawRepresentable {}
extension MCICardIssuanceStatus : Swift.Equatable {}
extension MCICardIssuanceStatus : Swift.Hashable {}
extension MCICardIssuanceStatus : Swift.RawRepresentable {}
extension MCICardIssuanceDeliveryMode : Swift.Equatable {}
extension MCICardIssuanceDeliveryMode : Swift.Hashable {}
extension MCICardIssuanceDeliveryMode : Swift.RawRepresentable {}
extension MCIMerchantActionType : Swift.Equatable {}
extension MCIMerchantActionType : Swift.Hashable {}
extension MCIMerchantActionType : Swift.RawRepresentable {}
extension MCIMerchantServiceType : Swift.Equatable {}
extension MCIMerchantServiceType : Swift.Hashable {}
extension MCIMerchantServiceType : Swift.RawRepresentable {}
extension MCICashInType : Swift.Equatable {}
extension MCICashInType : Swift.Hashable {}
extension MCICashInType : Swift.RawRepresentable {}
extension MCICashInMethod : Swift.Equatable {}
extension MCICashInMethod : Swift.Hashable {}
extension MCICashInMethod : Swift.RawRepresentable {}
extension MCICashInStatus : Swift.Equatable {}
extension MCICashInStatus : Swift.Hashable {}
extension MCICashInStatus : Swift.RawRepresentable {}
extension Api99CategoryType : Swift.Equatable {}
extension Api99CategoryType : Swift.Hashable {}
extension Api99CategoryType : Swift.RawRepresentable {}
extension MCISupportOptionType : Swift.Equatable {}
extension MCISupportOptionType : Swift.Hashable {}
extension MCICustomerTransactionStatus : Swift.Equatable {}
extension MCICustomerTransactionStatus : Swift.Hashable {}
extension MCICustomerTransactionStatus : Swift.RawRepresentable {}
extension MCICustomerTransactionType : Swift.Equatable {}
extension MCICustomerTransactionType : Swift.Hashable {}
extension MCICustomerTransactionType : Swift.RawRepresentable {}
extension MCIBalanceStatus : Swift.Equatable {}
extension MCIBalanceStatus : Swift.Hashable {}
extension MCIBalanceStatus : Swift.RawRepresentable {}
