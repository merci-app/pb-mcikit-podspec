// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MerciKit
import Alamofire
import Foundation
import MCIAuthCore
import MCICheckoutCore
import MCIDigitalCheckout
import MCIFoundation
import MCIKit
import MCILogger
import MCIMarketPayCore
import MCIPreferencesConfigurationCore
import MCIStorePaymentCore
import MCISupportCore
import MCIWithdrawalCore
import Swift
import SwiftyRSA
import UIKit
public class AddtionalHeaderDelegate : MCIAdditionalHeaderDelegate {
  public var delegate: MerciClientSecurityDelegate?
  public init(delegate: MerciClientSecurityDelegate? = nil)
  public func headers() -> [Swift.String : Swift.String]?
  @objc deinit
}
public enum MerciModule {
  case marketpay
  case pay
  case withdrawal(enableSupport: Swift.Bool)
  case merchant(Swift.String)
}
public enum MerciEnvironment {
  case production
  case sandbox
  public static func == (a: MerciEnvironment, b: MerciEnvironment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers final public class Merci {
  public static let shared: Merci
  public static var isInstanciate: Swift.Bool {
    get
  }
  final public class func instantiate(clientId: Swift.String, clientSecret: Swift.String, environment: MerciEnvironment, clientName: Swift.String?, homeImage: UIKit.UIImage? = nil, merciBrandImage: UIKit.UIImage? = nil, homeBackgroundColor: UIKit.UIColor? = nil, homeTitleColor: UIKit.UIColor? = nil, actionBarTintColor: UIKit.UIColor? = nil, actionTintColor: UIKit.UIColor? = nil, actionTextTintColor: UIKit.UIColor? = nil, loadingTintColor: UIKit.UIColor? = nil, clientSecurityDelegate: MerciClientSecurityDelegate? = nil, delegate: MerciDelegate? = nil)
  final public class func authenticate(cpf: Swift.String, completion: @escaping (Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void)
  final public class func revokeAuthentication(then completion: @escaping (Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void)
  final public class func isAuthenticated() -> Swift.Bool
  final public class func launch(viewController: UIKit.UIViewController, module: MerciModule, transition: UIKit.UIModalTransitionStyle = UIModalTransitionStyle.coverVertical, completion: @escaping ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void))
  @objc deinit
}
extension Merci {
  public static let userAuthenticationNotification: Foundation.Notification.Name
  public static let modulePresentationNotification: Foundation.Notification.Name
  public static let merchantPresentationNotification: Foundation.Notification.Name
  public static let transactionNotification: Foundation.Notification.Name
}
extension MCIFoundation {
  final public func revokeCustomerAuthentication(completion: @escaping ((Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void))
  final public func requestCustomerIssuerImport(completion: @escaping ((Swift.Result<Swift.Void, Foundation.NSError>) -> Swift.Void))
}
@_hasMissingDesignatedInitializers final public class SDKStyle : MCIStyle, Identifiable {
  final public var _homeTitleColor: UIKit.UIColor? {
    get
  }
  final public var _homeBackgroundColor: UIKit.UIColor? {
    get
  }
  final public var _actionBarTintColor: UIKit.UIColor? {
    get
  }
  final public var _actionTintColor: UIKit.UIColor? {
    get
  }
  final public var _actionTextTintColor: UIKit.UIColor? {
    get
  }
  final public var _loadingTintColor: UIKit.UIColor? {
    get
  }
  final public var base: MCIBaseTheme {
    get
  }
  final public var wallet: MCIWalletTheme {
    get
  }
  final public var marketPlace: MCIMarketPlaceTheme {
    get
  }
  final public var checkout: MCICheckoutTheme {
    get
  }
  @objc deinit
}
extension SDKStyle : MCIBaseTheme {
  final public var primaryColor: UIKit.UIColor {
    get
  }
  final public var secondaryColor: UIKit.UIColor {
    get
  }
  final public var loadingTintColor: UIKit.UIColor {
    get
  }
  final public var tabBarTintColor: UIKit.UIColor {
    get
  }
  final public var tabBarUnselectedColor: UIKit.UIColor {
    get
  }
  final public var tabBarBackgroundColor: UIKit.UIColor? {
    get
  }
  final public var inputTextColor: UIKit.UIColor {
    get
  }
  final public var caretTextColor: UIKit.UIColor {
    get
  }
  final public var titleTextColor: UIKit.UIColor {
    get
  }
  final public var bodyTextTextColor: UIKit.UIColor {
    get
  }
  final public var actionTintColor: UIKit.UIColor {
    get
  }
  final public var actionTextColor: UIKit.UIColor {
    get
  }
  final public var actionOutlineTintColor: UIKit.UIColor {
    get
  }
  final public var actionOutlineTextColor: UIKit.UIColor {
    get
  }
  final public var actionDisabledTintColor: UIKit.UIColor {
    get
  }
  final public var actionDisabledTextColor: UIKit.UIColor {
    get
  }
  final public var actionFlatTextColor: UIKit.UIColor {
    get
  }
}
extension SDKStyle : MCIWalletTheme {
  final public var walletNavBarTintColor: UIKit.UIColor {
    get
  }
  final public var walletNavBarActionColor: UIKit.UIColor {
    get
  }
  final public var walletStatusBarStyle: UIKit.UIStatusBarStyle {
    get
  }
  final public var accountsBackgroundColor: UIKit.UIColor {
    get
  }
  final public var accountsRefreshControlColor: UIKit.UIColor? {
    get
  }
  final public var accountsActiveIndicatorColor: UIKit.UIColor? {
    get
  }
  final public var accountsIndicatorColor: UIKit.UIColor? {
    get
  }
  final public var aliasBankTextColor: UIKit.UIColor? {
    get
  }
}
extension SDKStyle : MCIMarketPlaceTheme {
  final public var marketNavBarTintColor: UIKit.UIColor {
    get
  }
  final public var marketNavBarTextColor: UIKit.UIColor {
    get
  }
  final public var marketNavBarActionColor: UIKit.UIColor {
    get
  }
  final public var marketStatusBarStyle: UIKit.UIStatusBarStyle {
    get
  }
  final public var actionBarTintColor: UIKit.UIColor {
    get
  }
  final public var categoriesBackgroundColor: UIKit.UIColor {
    get
  }
  final public var categoriesRefreshControlColor: UIKit.UIColor? {
    get
  }
  final public var categoriesTintColor: UIKit.UIColor {
    get
  }
  final public var categoriesTextColor: UIKit.UIColor {
    get
  }
  final public var merchantsBackgroundColor: UIKit.UIColor {
    get
  }
  final public var merchantsActionTintColor: UIKit.UIColor {
    get
  }
  final public var merchantsTextColor: UIKit.UIColor {
    get
  }
  final public var servicesActionTintColor: UIKit.UIColor {
    get
  }
  final public var servicesActionTextColor: UIKit.UIColor {
    get
  }
  final public var servicesActionAltTintColor: UIKit.UIColor {
    get
  }
}
extension SDKStyle : MCICheckoutTheme {
  final public var payTintColor: UIKit.UIColor {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class MCINotificationCenter : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public typealias MerciDelegate = WithdrawalableDelegate & MerciBaseDelegate
public protocol MerciBaseDelegate {
  func supportFlow(reason: Swift.String?) -> UIKit.UIViewController?
  func authenticationFlow() -> UIKit.UIViewController
}
extension MerciBaseDelegate {
  public func supportFlow(reason: Swift.String?) -> UIKit.UIViewController?
}
public class BaseDelegate : MerciDelegate {
  public init()
  public func authenticationFlow() -> UIKit.UIViewController
  @objc deinit
}
public protocol MerciClientSecurityDelegate {
  func externalToken() -> Swift.String
}
extension MerciEnvironment : Swift.Equatable {}
extension MerciEnvironment : Swift.Hashable {}
